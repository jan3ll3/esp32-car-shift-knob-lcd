#include <Arduino.h>

// Pin Definitions
#define TFT_MOSI 38       // Data In (DIN)
#define TFT_SCK 39        // Clock (CLK)
#define TFT_CS 40         // Chip Select (CS)
#define TFT_DC 41         // Data/Command (DC)
#define TFT_RST 37        // Reset (RST)
#define TFT_BL 36         // Backlight


// Pin definitions
// Use the previously defined pins
const int PIN_MOSI = TFT_MOSI;
const int PIN_SCLK = TFT_SCK;
const int PIN_CS   = TFT_CS;
const int PIN_DC   = TFT_DC;
const int PIN_RST  = TFT_RST;
const int PIN_BL   = TFT_BL;

// SPI Configuration
const int SPI_SPEED = 80000000;  // 80MHz

void writeCommand(uint8_t cmd) {
    digitalWrite(PIN_DC, LOW);    // Command mode
    digitalWrite(PIN_CS, LOW);    // Select display
    
    // Bit-bang SPI
    for(int8_t i = 7; i >= 0; i--) {
        digitalWrite(PIN_SCLK, LOW);
        digitalWrite(PIN_MOSI, cmd & (1 << i));
        digitalWrite(PIN_SCLK, HIGH);
    }
    
    digitalWrite(PIN_CS, HIGH);   // Deselect display
}

void writeData(uint8_t data) {
    digitalWrite(PIN_DC, HIGH);   // Data mode
    digitalWrite(PIN_CS, LOW);    // Select display
    
    // Bit-bang SPI
    for(int8_t i = 7; i >= 0; i--) {
        digitalWrite(PIN_SCLK, LOW);
        digitalWrite(PIN_MOSI, data & (1 << i));
        digitalWrite(PIN_SCLK, HIGH);
    }
    
    digitalWrite(PIN_CS, HIGH);   // Deselect display
}

void initDisplay() {
    // Set pin modes
    pinMode(PIN_MOSI, OUTPUT);
    pinMode(PIN_SCLK, OUTPUT);
    pinMode(PIN_CS, OUTPUT);
    pinMode(PIN_DC, OUTPUT);
    pinMode(PIN_RST, OUTPUT);
    pinMode(PIN_BL, OUTPUT);
    
    // Initial states
    digitalWrite(PIN_CS, HIGH);
    digitalWrite(PIN_DC, HIGH);
    digitalWrite(PIN_SCLK, LOW);
    
    // Reset display
    digitalWrite(PIN_RST, HIGH);
    delay(10);
    digitalWrite(PIN_RST, LOW);
    delay(10);
    digitalWrite(PIN_RST, HIGH);
    delay(10);
    
    // GC9A01 initialization sequence
    writeCommand(0xEF);
    
    writeCommand(0xEB);
    writeData(0x14);
    
    writeCommand(0xFE);
    writeCommand(0xEF);
    
    writeCommand(0xEB);
    writeData(0x14);
    
    writeCommand(0x84);
    writeData(0x40);
    
    writeCommand(0x85);
    writeData(0xFF);
    
    writeCommand(0x86);
    writeData(0xFF);
    
    writeCommand(0x87);
    writeData(0xFF);
    
    writeCommand(0x88);
    writeData(0x0A);
    
    writeCommand(0x89);
    writeData(0x21);
    
    writeCommand(0x8A);
    writeData(0x00);
    
    writeCommand(0x8B);
    writeData(0x80);
    
    writeCommand(0x8C);
    writeData(0x01);
    
    writeCommand(0x8D);
    writeData(0x01);
    
    writeCommand(0x8E);
    writeData(0xFF);
    
    writeCommand(0x8F);
    writeData(0xFF);
    
    writeCommand(0xB6);
    writeData(0x00);
    writeData(0x20);
    
    writeCommand(0x36);
    writeData(0x08);
    
    writeCommand(0x3A);
    writeData(0x05);
    
    writeCommand(0x90);
    writeData(0x08);
    writeData(0x08);
    writeData(0x08);
    writeData(0x08);
    
    writeCommand(0xBD);
    writeData(0x06);
    
    writeCommand(0xBC);
    writeData(0x00);
    
    writeCommand(0xFF);
    writeData(0x60);
    writeData(0x01);
    writeData(0x04);
    
    writeCommand(0xC3);
    writeData(0x13);
    writeCommand(0xC4);
    writeData(0x13);
    
    writeCommand(0xC9);
    writeData(0x22);
    
    writeCommand(0xBE);
    writeData(0x11);
    
    writeCommand(0xE1);
    writeData(0x10);
    writeData(0x0E);
    
    writeCommand(0xDF);
    writeData(0x21);
    writeData(0x0c);
    writeData(0x02);
    
    writeCommand(0xF0);
    writeData(0x45);
    writeData(0x09);
    writeData(0x08);
    writeData(0x08);
    writeData(0x26);
    writeData(0x2A);
    
    writeCommand(0xF1);
    writeData(0x43);
    writeData(0x70);
    writeData(0x72);
    writeData(0x36);
    writeData(0x37);
    writeData(0x6F);
    
    writeCommand(0xF2);
    writeData(0x45);
    writeData(0x09);
    writeData(0x08);
    writeData(0x08);
    writeData(0x26);
    writeData(0x2A);
    
    writeCommand(0xF3);
    writeData(0x43);
    writeData(0x70);
    writeData(0x72);
    writeData(0x36);
    writeData(0x37);
    writeData(0x6F);
    
    writeCommand(0xED);
    writeData(0x1B);
    writeData(0x0B);
    
    writeCommand(0xAE);
    writeData(0x77);
    
    writeCommand(0xCD);
    writeData(0x63);
    
    writeCommand(0x70);
    writeData(0x07);
    writeData(0x07);
    writeData(0x04);
    writeData(0x0E);
    writeData(0x0F);
    writeData(0x09);
    writeData(0x07);
    writeData(0x08);
    writeData(0x03);
    
    writeCommand(0xE8);
    writeData(0x34);
    
    writeCommand(0x62);
    writeData(0x18);
    writeData(0x0D);
    writeData(0x71);
    writeData(0xED);
    writeData(0x70);
    writeData(0x70);
    writeData(0x18);
    writeData(0x0F);
    writeData(0x71);
    writeData(0xEF);
    writeData(0x70);
    writeData(0x70);
    
    writeCommand(0x63);
    writeData(0x18);
    writeData(0x11);
    writeData(0x71);
    writeData(0xF1);
    writeData(0x70);
    writeData(0x70);
    writeData(0x18);
    writeData(0x13);
    writeData(0x71);
    writeData(0xF3);
    writeData(0x70);
    writeData(0x70);
    
    writeCommand(0x64);
    writeData(0x28);
    writeData(0x29);
    writeData(0xF1);
    writeData(0x01);
    writeData(0xF1);
    writeData(0x00);
    writeData(0x07);
    
    writeCommand(0x66);
    writeData(0x3C);
    writeData(0x00);
    writeData(0xCD);
    writeData(0x67);
    writeData(0x45);
    writeData(0x45);
    writeData(0x10);
    writeData(0x00);
    writeData(0x00);
    writeData(0x00);
    
    writeCommand(0x67);
    writeData(0x00);
    writeData(0x3C);
    writeData(0x00);
    writeData(0x00);
    writeData(0x00);
    writeData(0x01);
    writeData(0x54);
    writeData(0x10);
    writeData(0x32);
    writeData(0x98);
    
    writeCommand(0x74);
    writeData(0x10);
    writeData(0x85);
    writeData(0x80);
    writeData(0x00);
    writeData(0x00);
    writeData(0x4E);
    writeData(0x00);
    
    writeCommand(0x98);
    writeData(0x3E);
    writeData(0x07);
    
    writeCommand(0x35);
    writeCommand(0x21);
    
    writeCommand(0x11);
    delay(120);
    
    writeCommand(0x29);
    delay(20);
}

void fillScreen(uint16_t color) {
    writeCommand(0x2A);
    writeData(0x00);
    writeData(0x00);
    writeData(0x00);
    writeData(0xEF);
    
    writeCommand(0x2B);
    writeData(0x00);
    writeData(0x00);
    writeData(0x00);
    writeData(0xEF);
    
    writeCommand(0x2C);
    
    digitalWrite(PIN_DC, HIGH);
    digitalWrite(PIN_CS, LOW);
    
    for(uint32_t i = 0; i < 240 * 240; i++) {
        // Send color high byte
        for(int8_t j = 7; j >= 0; j--) {
            digitalWrite(PIN_SCLK, LOW);
            digitalWrite(PIN_MOSI, (color >> (j + 8)) & 0x01);
            digitalWrite(PIN_SCLK, HIGH);
        }
        // Send color low byte
        for(int8_t j = 7; j >= 0; j--) {
            digitalWrite(PIN_SCLK, LOW);
            digitalWrite(PIN_MOSI, (color >> j) & 0x01);
            digitalWrite(PIN_SCLK, HIGH);
        }
    }
    
    digitalWrite(PIN_CS, HIGH);
}

void setup() {
    initDisplay();
    digitalWrite(PIN_BL, HIGH);  // Turn on backlight
    
    // Test display with red screen
    fillScreen(0x001F);
}

void loop() {
    // Your display code here
}